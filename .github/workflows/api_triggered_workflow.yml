name: API Triggered Workflow

on:
  repository_dispatch:
    types: [ custom_event ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ./minecraft-slack-bot
        run: npm install

      - name: Zip Lambda function
        run: |
          mkdir dist
          (cd minecraft-slack-bot && zip -r ../dist/minecraftBot.zip .)

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Execute Terraform based on payload
        working-directory: ./terraform
        run: |
          case "${{ github.event.client_payload.action }}" in
            start)
              terraform apply -auto-approve -var="game_state=running" -var="slack_token=${{ secrets.SLACK_BOT_OAUTH_TOKEN }}" -var="github_token=${{ secrets.GH_ACTIONS_TOKEN }}"
              ;;
            stop)
              terraform apply -auto-approve -var="game_state=stopped" -var="slack_token=${{ secrets.SLACK_BOT_OAUTH_TOKEN }}" -var="github_token=${{ secrets.GH_ACTIONS_TOKEN }}"
              ;;
            status)
              terraform output -json
              ;;
            *)
              echo "Unknown action: ${{ github.event.client_payload.action }}"
              exit 1
              ;;
          esac
      # - name: Print the payload
      #  run: echo '${{ toJson(github.event.client_payload) }}' | jq .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Get server IP
        working-directory: ./terraform
        id: server
        run: |
          echo "Fetching Terraform output..."
          TERRAFORM_OUTPUT=$(terraform output -json minecraft_server_public_ip)
          echo "Terraform output: $TERRAFORM_OUTPUT"

          echo "Extracting IP..."
          IP=$(echo $TERRAFORM_OUTPUT | jq -r '.[0]')
          echo "Extracted IP: $IP"

          echo "ip=${IP}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Specify the Python version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Find Python Path
        id: python-path
        run: |
          echo "PYTHON_PATH=$(which python3)" >> $GITHUB_ENV
          echo "Determined Python Path: $PYTHON_PATH"

      - name: Setup Ansible
        run: |
          # Install Ansible (example for Ubuntu runners)
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Create Ansible Inventory
        working-directory: ./ansible
        run: |
          # Create a directory for the inventory if it doesn't exist
          mkdir -p ./inventory
          # Create the inventory file with the server IP
          echo "[minecraft_server]" > ./inventory/minecraft
          echo "${{ env.ip }} ansible_python_interpreter=${{ env.PYTHON_PATH }}" >> ./ansible/inventory/minecraft

      - name: Run Ansible Playbook
        working-directory: ./ansible
        run: |
          # Run your Ansible playbook using the inventory file
          ansible-playbook -i ./inventory/minecraft playbook.yml
