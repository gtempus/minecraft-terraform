- name: simple task
  hosts: all
  gather_facts: false
  vars:
    ansible_connection: aws_ssm
    ansible_aws_ssm_bucket_name: gtempus-minecraft-server-ansible
    ansible_aws_ssm_region: us-east-2
    ansible_aws_ssm_instance_id: instance-id
    device_name: /dev/xvdf
    mount_point: /mnt/ebs_volume
    s3_minecraft_file: 'bedrock-server-1.20.51.01.zip'
    local_path: '/tmp/bedrock-server.zip'
    minecraft_server_directory: "{{ mount_point }}/minecraft"
    extraction_path: "{{ minecraft_server_directory }}"
  tasks:
    - name: Wait 60 seconds for target connection to become reachable/usable
      wait_for_connection:
      timeout: 60

    - name: Check existing filesystem on EBS Volume
      command: lsblk -f "{{ device_name }}"
      register: lsblk_f_output
      ignore_errors: true

    - name: Display lsblk output
      debug:
        msg: "{{ lsblk_f_output.stdout }}"

    - name: Determine if filesystem exists
      set_fact:
        filesystem_exists: "{{ 'ext4' in lsblk_f_output.stdout }}"

    - name: Create filesystem on EBS Volume if not exists
      become: true
      filesystem:
        fstype: ext4
        dev: "{{ device_name }}"
      when: not filesystem_exists

    - name: Create mount point
      become: true
      file:
        path: "{{ mount_point }}"
        state: directory

    - name: Mount EBS Volume
      become: true
      mount:
        path: "{{ mount_point }}"
        src: "{{ device_name }}"
        fstype: ext4
        state: mounted
        opts: defaults,nofail

    - name: Install pip (Debian/Ubuntu)
      become: true
      ansible.builtin.apt:
        name: python3-pip
        state: present

    - name: Install required Python libraries for AWS
      ansible.builtin.pip:
        name:
          - boto3
          - botocore
        state: present

    - name: Create Minecraft server directory
      become: true
      ansible.builtin.file:
        path: "{{ minecraft_server_directory }}"
        state: directory

    - name: Install unzip package (Debian/Ubuntu)
      become: true
      ansible.builtin.apt:
        name: unzip
        state: present

    - name: Download file from S3
      ansible.builtin.aws_s3:
        bucket: "{{  ansible_aws_ssm_bucket_name }}"
        object: "/{{ s3_minecraft_file }}"
        dest: "{{ local_path }}"
        mode: get

    - name: Unzip the file
      become: true
      ansible.builtin.unarchive:
        src: "{{ local_path }}"
        dest: "{{ extraction_path }}"
        remote_src: yes
